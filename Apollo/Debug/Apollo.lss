
Apollo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004e  00800100  00000aaa  00000b3e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000aaa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000079  0080014e  0080014e  00000b8c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b8c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bbc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000aea  00000000  00000000  00000d34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000046d  00000000  00000000  0000181e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007bc  00000000  00000000  00001c8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000284  00000000  00000000  00002448  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000338  00000000  00000000  000026cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002f8  00000000  00000000  00002a04  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00002cfc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 99 02 	jmp	0x532	; 0x532 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ea       	ldi	r30, 0xAA	; 170
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 34       	cpi	r26, 0x4E	; 78
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e4       	ldi	r26, 0x4E	; 78
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 3c       	cpi	r26, 0xC7	; 199
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 e6 01 	call	0x3cc	; 0x3cc <main>
  9e:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADCconfig>:

/* Configuração do conversor A/D */
void ADCconfig(void) {
	/* Desabilita interrupções
		(i.e. instruções seguintes agem como uma instrução atômica) */
	cli();
  a6:	f8 94       	cli
	
	/* Limpa registradores */
	ADCSRA = ADCSRB = 0;
  a8:	10 92 7b 00 	sts	0x007B, r1
  ac:	ea e7       	ldi	r30, 0x7A	; 122
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	10 82       	st	Z, r1
		
    /* Configura tensão de referência (AVcc = AVref) */
    ADMUX |= (1 << REFS0);
  b2:	ac e7       	ldi	r26, 0x7C	; 124
  b4:	b0 e0       	ldi	r27, 0x00	; 0
  b6:	8c 91       	ld	r24, X
  b8:	80 64       	ori	r24, 0x40	; 64
  ba:	8c 93       	st	X, r24

	/* Alinha valores à esquerda p/ ler apenas do ADCH */
	ADMUX |= (1 << ADLAR);
  bc:	8c 91       	ld	r24, X
  be:	80 62       	ori	r24, 0x20	; 32
  c0:	8c 93       	st	X, r24

    /* Configura preescaler (CLK/32 = 16 MHz/32 = 500 kHz) */
    ADCSRA |= (1 << ADPS2) | (1 << ADPS0);
  c2:	80 81       	ld	r24, Z
  c4:	85 60       	ori	r24, 0x05	; 5
  c6:	80 83       	st	Z, r24
	
	/* Habilita autotrigger */
	ADCSRA |= (1 << ADATE);
  c8:	80 81       	ld	r24, Z
  ca:	80 62       	ori	r24, 0x20	; 32
  cc:	80 83       	st	Z, r24
	
    /* Habilita interrupção ao finalizar medição */
    ADCSRA |= (1 << ADIE);
  ce:	80 81       	ld	r24, Z
  d0:	88 60       	ori	r24, 0x08	; 8
  d2:	80 83       	st	Z, r24

	/* Habilita ADC */
	ADCSRA |= (1 << ADEN);
  d4:	80 81       	ld	r24, Z
  d6:	80 68       	ori	r24, 0x80	; 128
  d8:	80 83       	st	Z, r24
	
	/* Inicia ADC */
	ADCSRA |= (1 << ADSC);
  da:	80 81       	ld	r24, Z
  dc:	80 64       	ori	r24, 0x40	; 64
  de:	80 83       	st	Z, r24
	
	/* Reabilita interrupções */
	sei();
  e0:	78 94       	sei
  e2:	08 95       	ret

000000e4 <s2>:
}

/* Estado inicial de aprendizado */
void s2() {
    // VERIFICAR O QUE ESSE ESTADO FAZ.
    sm.state = S3;  // Avança na FSM.
  e4:	e4 e7       	ldi	r30, 0x74	; 116
  e6:	f1 e0       	ldi	r31, 0x01	; 1
  e8:	83 e0       	ldi	r24, 0x03	; 3
  ea:	80 83       	st	Z, r24
    sm.action[sm.state](); // Vai para a função do próximo estado.
  ec:	e0 81       	ld	r30, Z
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	ee 0f       	add	r30, r30
  f2:	ff 1f       	adc	r31, r31
  f4:	ec 58       	subi	r30, 0x8C	; 140
  f6:	fe 4f       	sbci	r31, 0xFE	; 254
  f8:	01 80       	ldd	r0, Z+1	; 0x01
  fa:	f2 81       	ldd	r31, Z+2	; 0x02
  fc:	e0 2d       	mov	r30, r0
  fe:	09 95       	icall
 100:	08 95       	ret

00000102 <s0>:
	sm.action[sm.state](); // Vai para a função do próximo estado.
}

/* Seleciona modo: 0 - afinação e 1 - aprendizado. */
void s0() {
    defineStrings();		// Inicializa o objeto strings com os nomes e frequï¿½ncias de cada corda.
 102:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <defineStrings>

	if (!mode)  // Tuning
 106:	80 91 00 01 	lds	r24, 0x0100
 10a:	81 11       	cpse	r24, r1
 10c:	04 c0       	rjmp	.+8      	; 0x116 <s0+0x14>
        sm.state = S1;
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	80 93 74 01 	sts	0x0174, r24
 114:	03 c0       	rjmp	.+6      	; 0x11c <s0+0x1a>
    else        // Learning
        sm.state = S2;
 116:	82 e0       	ldi	r24, 0x02	; 2
 118:	80 93 74 01 	sts	0x0174, r24

	sm.action[sm.state](); // Vai para a função do próximo estado.
 11c:	e0 91 74 01 	lds	r30, 0x0174
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	ee 0f       	add	r30, r30
 124:	ff 1f       	adc	r31, r31
 126:	ec 58       	subi	r30, 0x8C	; 140
 128:	fe 4f       	sbci	r31, 0xFE	; 254
 12a:	01 80       	ldd	r0, Z+1	; 0x01
 12c:	f2 81       	ldd	r31, Z+2	; 0x02
 12e:	e0 2d       	mov	r30, r0
 130:	09 95       	icall
 132:	08 95       	ret

00000134 <s1>:
/* Estado inicial de afinação */
void s1() {
	// SIMULADO
	uint8_t tuning = 2;

	selectTuning(tuning); // Define afinação (frequências desejadas).
 134:	82 e0       	ldi	r24, 0x02	; 2
 136:	0e 94 19 02 	call	0x432	; 0x432 <selectTuning>
    sm.state = S3;   // Avança na FSM.
 13a:	e4 e7       	ldi	r30, 0x74	; 116
 13c:	f1 e0       	ldi	r31, 0x01	; 1
 13e:	83 e0       	ldi	r24, 0x03	; 3
 140:	80 83       	st	Z, r24
    sm.action[sm.state](); // Vai para a função do próximo estado.
 142:	e0 81       	ld	r30, Z
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	ee 0f       	add	r30, r30
 148:	ff 1f       	adc	r31, r31
 14a:	ec 58       	subi	r30, 0x8C	; 140
 14c:	fe 4f       	sbci	r31, 0xFE	; 254
 14e:	01 80       	ldd	r0, Z+1	; 0x01
 150:	f2 81       	ldd	r31, Z+2	; 0x02
 152:	e0 2d       	mov	r30, r0
 154:	09 95       	icall
 156:	08 95       	ret

00000158 <t_s3>:
    sm.action[sm.state](); // Vai para a função do próximo estado.
}

/* Funções de estados de afinação */
void t_s3() {
    tuneString(0);
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	0e 94 52 02 	call	0x4a4	; 0x4a4 <tuneString>
    sm.state = S4;  // Avança na FSM.
 15e:	e4 e7       	ldi	r30, 0x74	; 116
 160:	f1 e0       	ldi	r31, 0x01	; 1
 162:	84 e0       	ldi	r24, 0x04	; 4
 164:	80 83       	st	Z, r24
    sm.action[sm.state](); // Vai para a função do próximo estado.
 166:	e0 81       	ld	r30, Z
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	ee 0f       	add	r30, r30
 16c:	ff 1f       	adc	r31, r31
 16e:	ec 58       	subi	r30, 0x8C	; 140
 170:	fe 4f       	sbci	r31, 0xFE	; 254
 172:	01 80       	ldd	r0, Z+1	; 0x01
 174:	f2 81       	ldd	r31, Z+2	; 0x02
 176:	e0 2d       	mov	r30, r0
 178:	09 95       	icall
 17a:	08 95       	ret

0000017c <t_s4>:
}
void t_s4() {
    tuneString(1);
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	0e 94 52 02 	call	0x4a4	; 0x4a4 <tuneString>
    sm.state = S5; // Avança na FSM.
 182:	e4 e7       	ldi	r30, 0x74	; 116
 184:	f1 e0       	ldi	r31, 0x01	; 1
 186:	85 e0       	ldi	r24, 0x05	; 5
 188:	80 83       	st	Z, r24
    sm.action[sm.state](); // Vai para a função do próximo estado.
 18a:	e0 81       	ld	r30, Z
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	ee 0f       	add	r30, r30
 190:	ff 1f       	adc	r31, r31
 192:	ec 58       	subi	r30, 0x8C	; 140
 194:	fe 4f       	sbci	r31, 0xFE	; 254
 196:	01 80       	ldd	r0, Z+1	; 0x01
 198:	f2 81       	ldd	r31, Z+2	; 0x02
 19a:	e0 2d       	mov	r30, r0
 19c:	09 95       	icall
 19e:	08 95       	ret

000001a0 <t_s5>:
}
void t_s5() {
    tuneString(2);
 1a0:	82 e0       	ldi	r24, 0x02	; 2
 1a2:	0e 94 52 02 	call	0x4a4	; 0x4a4 <tuneString>
    sm.state = S6;  // Avança na FSM.
 1a6:	e4 e7       	ldi	r30, 0x74	; 116
 1a8:	f1 e0       	ldi	r31, 0x01	; 1
 1aa:	86 e0       	ldi	r24, 0x06	; 6
 1ac:	80 83       	st	Z, r24
    sm.action[sm.state](); // Vai para a função do próximo estado.
 1ae:	e0 81       	ld	r30, Z
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	ee 0f       	add	r30, r30
 1b4:	ff 1f       	adc	r31, r31
 1b6:	ec 58       	subi	r30, 0x8C	; 140
 1b8:	fe 4f       	sbci	r31, 0xFE	; 254
 1ba:	01 80       	ldd	r0, Z+1	; 0x01
 1bc:	f2 81       	ldd	r31, Z+2	; 0x02
 1be:	e0 2d       	mov	r30, r0
 1c0:	09 95       	icall
 1c2:	08 95       	ret

000001c4 <t_s6>:
}
void t_s6() {
    tuneString(3);
 1c4:	83 e0       	ldi	r24, 0x03	; 3
 1c6:	0e 94 52 02 	call	0x4a4	; 0x4a4 <tuneString>
    sm.state = S7;  // Avança na FSM.
 1ca:	e4 e7       	ldi	r30, 0x74	; 116
 1cc:	f1 e0       	ldi	r31, 0x01	; 1
 1ce:	87 e0       	ldi	r24, 0x07	; 7
 1d0:	80 83       	st	Z, r24
    sm.action[sm.state](); // Vai para a função do próximo estado.
 1d2:	e0 81       	ld	r30, Z
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	ee 0f       	add	r30, r30
 1d8:	ff 1f       	adc	r31, r31
 1da:	ec 58       	subi	r30, 0x8C	; 140
 1dc:	fe 4f       	sbci	r31, 0xFE	; 254
 1de:	01 80       	ldd	r0, Z+1	; 0x01
 1e0:	f2 81       	ldd	r31, Z+2	; 0x02
 1e2:	e0 2d       	mov	r30, r0
 1e4:	09 95       	icall
 1e6:	08 95       	ret

000001e8 <t_s7>:
}
void t_s7() {
    tuneString(4);
 1e8:	84 e0       	ldi	r24, 0x04	; 4
 1ea:	0e 94 52 02 	call	0x4a4	; 0x4a4 <tuneString>
    sm.state = S8;
 1ee:	e4 e7       	ldi	r30, 0x74	; 116
 1f0:	f1 e0       	ldi	r31, 0x01	; 1
 1f2:	88 e0       	ldi	r24, 0x08	; 8
 1f4:	80 83       	st	Z, r24
    sm.action[sm.state](); // Vai para a função do próximo estado.
 1f6:	e0 81       	ld	r30, Z
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	ee 0f       	add	r30, r30
 1fc:	ff 1f       	adc	r31, r31
 1fe:	ec 58       	subi	r30, 0x8C	; 140
 200:	fe 4f       	sbci	r31, 0xFE	; 254
 202:	01 80       	ldd	r0, Z+1	; 0x01
 204:	f2 81       	ldd	r31, Z+2	; 0x02
 206:	e0 2d       	mov	r30, r0
 208:	09 95       	icall
 20a:	08 95       	ret

0000020c <t_s8>:
}
void t_s8() {
    tuneString(5);
 20c:	85 e0       	ldi	r24, 0x05	; 5
 20e:	0e 94 52 02 	call	0x4a4	; 0x4a4 <tuneString>
    done = 1;
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	80 93 4e 01 	sts	0x014E, r24
    sm.state = S0;  // Avança na FSM.
 218:	e4 e7       	ldi	r30, 0x74	; 116
 21a:	f1 e0       	ldi	r31, 0x01	; 1
 21c:	10 82       	st	Z, r1
    sm.action[sm.state](); // Vai para a função do próximo estado.
 21e:	e0 81       	ld	r30, Z
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	ee 0f       	add	r30, r30
 224:	ff 1f       	adc	r31, r31
 226:	ec 58       	subi	r30, 0x8C	; 140
 228:	fe 4f       	sbci	r31, 0xFE	; 254
 22a:	01 80       	ldd	r0, Z+1	; 0x01
 22c:	f2 81       	ldd	r31, Z+2	; 0x02
 22e:	e0 2d       	mov	r30, r0
 230:	09 95       	icall
 232:	08 95       	ret

00000234 <l_s3>:
}

/* Funções de estados de aprendizado */
void l_s3() {
    float frequency = detectFrequency();
 234:	0e 94 36 02 	call	0x46c	; 0x46c <detectFrequency>
    uint8_t stringNum = 0;

    saveFrequency(frequency, stringNum);
 238:	40 e0       	ldi	r20, 0x00	; 0
 23a:	0e 94 1a 02 	call	0x434	; 0x434 <saveFrequency>
    sm.state = S4;  // Avança na FSM.
 23e:	e4 e7       	ldi	r30, 0x74	; 116
 240:	f1 e0       	ldi	r31, 0x01	; 1
 242:	84 e0       	ldi	r24, 0x04	; 4
 244:	80 83       	st	Z, r24
    sm.action[sm.state](); // Vai para a função do próximo estado.
 246:	e0 81       	ld	r30, Z
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	ee 0f       	add	r30, r30
 24c:	ff 1f       	adc	r31, r31
 24e:	ec 58       	subi	r30, 0x8C	; 140
 250:	fe 4f       	sbci	r31, 0xFE	; 254
 252:	01 80       	ldd	r0, Z+1	; 0x01
 254:	f2 81       	ldd	r31, Z+2	; 0x02
 256:	e0 2d       	mov	r30, r0
 258:	09 95       	icall
 25a:	08 95       	ret

0000025c <l_s4>:
}
void l_s4() {
    float frequency = detectFrequency();
 25c:	0e 94 36 02 	call	0x46c	; 0x46c <detectFrequency>
    uint8_t stringNum = 1;

    saveFrequency(frequency, stringNum);
 260:	41 e0       	ldi	r20, 0x01	; 1
 262:	0e 94 1a 02 	call	0x434	; 0x434 <saveFrequency>
    sm.state = S5;  // Avança na FSM.
 266:	e4 e7       	ldi	r30, 0x74	; 116
 268:	f1 e0       	ldi	r31, 0x01	; 1
 26a:	85 e0       	ldi	r24, 0x05	; 5
 26c:	80 83       	st	Z, r24
    sm.action[sm.state](); // Vai para a função do próximo estado.
 26e:	e0 81       	ld	r30, Z
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	ee 0f       	add	r30, r30
 274:	ff 1f       	adc	r31, r31
 276:	ec 58       	subi	r30, 0x8C	; 140
 278:	fe 4f       	sbci	r31, 0xFE	; 254
 27a:	01 80       	ldd	r0, Z+1	; 0x01
 27c:	f2 81       	ldd	r31, Z+2	; 0x02
 27e:	e0 2d       	mov	r30, r0
 280:	09 95       	icall
 282:	08 95       	ret

00000284 <l_s5>:
}
void l_s5() {
    float frequency = detectFrequency();
 284:	0e 94 36 02 	call	0x46c	; 0x46c <detectFrequency>
    uint8_t stringNum = 2;

    saveFrequency(frequency, stringNum);
 288:	42 e0       	ldi	r20, 0x02	; 2
 28a:	0e 94 1a 02 	call	0x434	; 0x434 <saveFrequency>
    sm.state = S6;  // Avança na FSM.
 28e:	e4 e7       	ldi	r30, 0x74	; 116
 290:	f1 e0       	ldi	r31, 0x01	; 1
 292:	86 e0       	ldi	r24, 0x06	; 6
 294:	80 83       	st	Z, r24
    sm.action[sm.state](); // Vai para a função do próximo estado.
 296:	e0 81       	ld	r30, Z
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	ee 0f       	add	r30, r30
 29c:	ff 1f       	adc	r31, r31
 29e:	ec 58       	subi	r30, 0x8C	; 140
 2a0:	fe 4f       	sbci	r31, 0xFE	; 254
 2a2:	01 80       	ldd	r0, Z+1	; 0x01
 2a4:	f2 81       	ldd	r31, Z+2	; 0x02
 2a6:	e0 2d       	mov	r30, r0
 2a8:	09 95       	icall
 2aa:	08 95       	ret

000002ac <l_s6>:
}
void l_s6() {
    float frequency = detectFrequency();
 2ac:	0e 94 36 02 	call	0x46c	; 0x46c <detectFrequency>
    uint8_t stringNum = 3;

    saveFrequency(frequency, stringNum);
 2b0:	43 e0       	ldi	r20, 0x03	; 3
 2b2:	0e 94 1a 02 	call	0x434	; 0x434 <saveFrequency>
    sm.state = S7;  // Avança na FSM.
 2b6:	e4 e7       	ldi	r30, 0x74	; 116
 2b8:	f1 e0       	ldi	r31, 0x01	; 1
 2ba:	87 e0       	ldi	r24, 0x07	; 7
 2bc:	80 83       	st	Z, r24
    sm.action[sm.state](); // Vai para a função do próximo estado.
 2be:	e0 81       	ld	r30, Z
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	ee 0f       	add	r30, r30
 2c4:	ff 1f       	adc	r31, r31
 2c6:	ec 58       	subi	r30, 0x8C	; 140
 2c8:	fe 4f       	sbci	r31, 0xFE	; 254
 2ca:	01 80       	ldd	r0, Z+1	; 0x01
 2cc:	f2 81       	ldd	r31, Z+2	; 0x02
 2ce:	e0 2d       	mov	r30, r0
 2d0:	09 95       	icall
 2d2:	08 95       	ret

000002d4 <l_s7>:
}
void l_s7() {
    float frequency = detectFrequency();
 2d4:	0e 94 36 02 	call	0x46c	; 0x46c <detectFrequency>
    uint8_t stringNum = 4;

    saveFrequency(frequency, stringNum);
 2d8:	44 e0       	ldi	r20, 0x04	; 4
 2da:	0e 94 1a 02 	call	0x434	; 0x434 <saveFrequency>
    sm.state = S8;  // Avança na FSM.
 2de:	e4 e7       	ldi	r30, 0x74	; 116
 2e0:	f1 e0       	ldi	r31, 0x01	; 1
 2e2:	88 e0       	ldi	r24, 0x08	; 8
 2e4:	80 83       	st	Z, r24
    sm.action[sm.state](); // Vai para a função do próximo estado.
 2e6:	e0 81       	ld	r30, Z
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	ee 0f       	add	r30, r30
 2ec:	ff 1f       	adc	r31, r31
 2ee:	ec 58       	subi	r30, 0x8C	; 140
 2f0:	fe 4f       	sbci	r31, 0xFE	; 254
 2f2:	01 80       	ldd	r0, Z+1	; 0x01
 2f4:	f2 81       	ldd	r31, Z+2	; 0x02
 2f6:	e0 2d       	mov	r30, r0
 2f8:	09 95       	icall
 2fa:	08 95       	ret

000002fc <l_s8>:
}
void l_s8() {
    float frequency = detectFrequency();
 2fc:	0e 94 36 02 	call	0x46c	; 0x46c <detectFrequency>
    uint8_t stringNum = 5;

    saveFrequency(frequency, stringNum);
 300:	45 e0       	ldi	r20, 0x05	; 5
 302:	0e 94 1a 02 	call	0x434	; 0x434 <saveFrequency>
    done = 1;
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	80 93 4e 01 	sts	0x014E, r24
    sm.state = S0;  // Avança na FSM.
 30c:	e4 e7       	ldi	r30, 0x74	; 116
 30e:	f1 e0       	ldi	r31, 0x01	; 1
 310:	10 82       	st	Z, r1
    sm.action[sm.state](); // Vai para a função do próximo estado.
 312:	e0 81       	ld	r30, Z
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	ee 0f       	add	r30, r30
 318:	ff 1f       	adc	r31, r31
 31a:	ec 58       	subi	r30, 0x8C	; 140
 31c:	fe 4f       	sbci	r31, 0xFE	; 254
 31e:	01 80       	ldd	r0, Z+1	; 0x01
 320:	f2 81       	ldd	r31, Z+2	; 0x02
 322:	e0 2d       	mov	r30, r0
 324:	09 95       	icall
 326:	08 95       	ret

00000328 <initFSM>:
volatile fsm sm;
STRING string[6];

/* Inicialização da FSM */
void initFSM() {
	sm.state = S0;								// Estado inicial.
 328:	e4 e7       	ldi	r30, 0x74	; 116
 32a:	f1 e0       	ldi	r31, 0x01	; 1
 32c:	10 82       	st	Z, r1

    /* Estados inicias */
    sm.action[S0] = s0;
 32e:	81 e8       	ldi	r24, 0x81	; 129
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	92 83       	std	Z+2, r25	; 0x02
 334:	81 83       	std	Z+1, r24	; 0x01
    sm.action[S1] = s1;
 336:	8a e9       	ldi	r24, 0x9A	; 154
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	94 83       	std	Z+4, r25	; 0x04
 33c:	83 83       	std	Z+3, r24	; 0x03
    sm.action[S2] = s2;
 33e:	82 e7       	ldi	r24, 0x72	; 114
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	96 83       	std	Z+6, r25	; 0x06
 344:	85 83       	std	Z+5, r24	; 0x05

    if (!mode) {    // Afinação
 346:	80 91 00 01 	lds	r24, 0x0100
 34a:	81 11       	cpse	r24, r1
 34c:	19 c0       	rjmp	.+50     	; 0x380 <initFSM+0x58>
        sm.action[S3] = t_s3;
 34e:	8c ea       	ldi	r24, 0xAC	; 172
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	90 87       	std	Z+8, r25	; 0x08
 354:	87 83       	std	Z+7, r24	; 0x07
        sm.action[S4] = t_s4;
 356:	8e eb       	ldi	r24, 0xBE	; 190
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	92 87       	std	Z+10, r25	; 0x0a
 35c:	81 87       	std	Z+9, r24	; 0x09
        sm.action[S5] = t_s5;
 35e:	80 ed       	ldi	r24, 0xD0	; 208
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	94 87       	std	Z+12, r25	; 0x0c
 364:	83 87       	std	Z+11, r24	; 0x0b
        sm.action[S6] = t_s6;
 366:	82 ee       	ldi	r24, 0xE2	; 226
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	96 87       	std	Z+14, r25	; 0x0e
 36c:	85 87       	std	Z+13, r24	; 0x0d
        sm.action[S7] = t_s7;
 36e:	84 ef       	ldi	r24, 0xF4	; 244
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	90 8b       	std	Z+16, r25	; 0x10
 374:	87 87       	std	Z+15, r24	; 0x0f
        sm.action[S8] = t_s8;
 376:	86 e0       	ldi	r24, 0x06	; 6
 378:	91 e0       	ldi	r25, 0x01	; 1
 37a:	92 8b       	std	Z+18, r25	; 0x12
 37c:	81 8b       	std	Z+17, r24	; 0x11
 37e:	1a c0       	rjmp	.+52     	; 0x3b4 <initFSM+0x8c>
    }

    else {          // Aprendizado
        sm.action[S3] = l_s3;
 380:	e4 e7       	ldi	r30, 0x74	; 116
 382:	f1 e0       	ldi	r31, 0x01	; 1
 384:	8a e1       	ldi	r24, 0x1A	; 26
 386:	91 e0       	ldi	r25, 0x01	; 1
 388:	90 87       	std	Z+8, r25	; 0x08
 38a:	87 83       	std	Z+7, r24	; 0x07
        sm.action[S4] = l_s4;
 38c:	8e e2       	ldi	r24, 0x2E	; 46
 38e:	91 e0       	ldi	r25, 0x01	; 1
 390:	92 87       	std	Z+10, r25	; 0x0a
 392:	81 87       	std	Z+9, r24	; 0x09
        sm.action[S5] = l_s5;
 394:	82 e4       	ldi	r24, 0x42	; 66
 396:	91 e0       	ldi	r25, 0x01	; 1
 398:	94 87       	std	Z+12, r25	; 0x0c
 39a:	83 87       	std	Z+11, r24	; 0x0b
        sm.action[S6] = l_s6;
 39c:	86 e5       	ldi	r24, 0x56	; 86
 39e:	91 e0       	ldi	r25, 0x01	; 1
 3a0:	96 87       	std	Z+14, r25	; 0x0e
 3a2:	85 87       	std	Z+13, r24	; 0x0d
        sm.action[S7] = l_s7;
 3a4:	8a e6       	ldi	r24, 0x6A	; 106
 3a6:	91 e0       	ldi	r25, 0x01	; 1
 3a8:	90 8b       	std	Z+16, r25	; 0x10
 3aa:	87 87       	std	Z+15, r24	; 0x0f
        sm.action[S8] = l_s8;
 3ac:	8e e7       	ldi	r24, 0x7E	; 126
 3ae:	91 e0       	ldi	r25, 0x01	; 1
 3b0:	92 8b       	std	Z+18, r25	; 0x12
 3b2:	81 8b       	std	Z+17, r24	; 0x11
    }

	sm.action[sm.state](); // Vai para a função do próximo estado.
 3b4:	e0 91 74 01 	lds	r30, 0x0174
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	ee 0f       	add	r30, r30
 3bc:	ff 1f       	adc	r31, r31
 3be:	ec 58       	subi	r30, 0x8C	; 140
 3c0:	fe 4f       	sbci	r31, 0xFE	; 254
 3c2:	01 80       	ldd	r0, Z+1	; 0x01
 3c4:	f2 81       	ldd	r31, Z+2	; 0x02
 3c6:	e0 2d       	mov	r30, r0
 3c8:	09 95       	icall
 3ca:	08 95       	ret

000003cc <main>:

int main() {
	// STRING string[6];           // 6 cordas para afinar.

	/* Simular leitura de porta */
	DDRD = 0x00; PORTD = 0x01;
 3cc:	1a b8       	out	0x0a, r1	; 10
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	8b b9       	out	0x0b, r24	; 11
	DDRB = 0x00; PORTB = 0x00;
 3d2:	14 b8       	out	0x04, r1	; 4
 3d4:	15 b8       	out	0x05, r1	; 5

	while(1) {		// Aguarda selecionar modo.
		while (!PORTD1 || !PORTB1);						// Aguarda acionamento do switch.

		if (PORTD1)  // Afina��o.
			mode = 0;
 3d6:	10 92 00 01 	sts	0x0100, r1
		else		// PORTB ativa.
			mode = 1; // Aprendizado.

		while (!done) {
 3da:	80 91 4e 01 	lds	r24, 0x014E
 3de:	81 11       	cpse	r24, r1
 3e0:	fa cf       	rjmp	.-12     	; 0x3d6 <main+0xa>
			initFSM();							// Inicialização da FSM.
 3e2:	0e 94 94 01 	call	0x328	; 0x328 <initFSM>
		if (PORTD1)  // Afina��o.
			mode = 0;
		else		// PORTB ativa.
			mode = 1; // Aprendizado.

		while (!done) {
 3e6:	80 91 4e 01 	lds	r24, 0x014E
 3ea:	88 23       	and	r24, r24
 3ec:	d1 f3       	breq	.-12     	; 0x3e2 <main+0x16>
 3ee:	f3 cf       	rjmp	.-26     	; 0x3d6 <main+0xa>

000003f0 <defineStrings>:

    stringInTune = 1;    // Avança na FSM.
}

/* Inicialização do objeto String com suas respectivas frequências padrão de afinação */
void defineStrings() {
 3f0:	80 91 ad 01 	lds	r24, 0x01AD
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	9c 01       	movw	r18, r24
 3f8:	22 0f       	add	r18, r18
 3fa:	33 1f       	adc	r19, r19
 3fc:	82 0f       	add	r24, r18
 3fe:	93 1f       	adc	r25, r19
 400:	88 0f       	add	r24, r24
 402:	99 1f       	adc	r25, r25
 404:	88 0f       	add	r24, r24
 406:	99 1f       	adc	r25, r25
 408:	88 0f       	add	r24, r24
 40a:	99 1f       	adc	r25, r25
 40c:	fc 01       	movw	r30, r24
 40e:	eb 5f       	subi	r30, 0xFB	; 251
 410:	fe 4f       	sbci	r31, 0xFE	; 254
 412:	ac e5       	ldi	r26, 0x5C	; 92
 414:	b1 e0       	ldi	r27, 0x01	; 1
 416:	83 5e       	subi	r24, 0xE3	; 227
 418:	9e 4f       	sbci	r25, 0xFE	; 254
    for (int i = 0; i < 6; i++)
        string[i].tunedFrequency = frequencyTable[tuning][i];
 41a:	41 91       	ld	r20, Z+
 41c:	51 91       	ld	r21, Z+
 41e:	61 91       	ld	r22, Z+
 420:	71 91       	ld	r23, Z+
 422:	4d 93       	st	X+, r20
 424:	5d 93       	st	X+, r21
 426:	6d 93       	st	X+, r22
 428:	7d 93       	st	X+, r23
    stringInTune = 1;    // Avança na FSM.
}

/* Inicialização do objeto String com suas respectivas frequências padrão de afinação */
void defineStrings() {
    for (int i = 0; i < 6; i++)
 42a:	e8 17       	cp	r30, r24
 42c:	f9 07       	cpc	r31, r25
 42e:	a9 f7       	brne	.-22     	; 0x41a <__FUSE_REGION_LENGTH__+0x1a>
        string[i].tunedFrequency = frequencyTable[tuning][i];
}
 430:	08 95       	ret

00000432 <selectTuning>:

/* Define afinação */
void selectTuning(uint8_t tuning) {
 432:	08 95       	ret

00000434 <saveFrequency>:
	}
}

/* Aprende nova afinação */
void saveFrequency(float frequency, uint8_t stringNum) {
      string[stringNum].tunedFrequency = frequency;
 434:	e4 2f       	mov	r30, r20
 436:	f0 e0       	ldi	r31, 0x00	; 0
 438:	ee 0f       	add	r30, r30
 43a:	ff 1f       	adc	r31, r31
 43c:	ee 0f       	add	r30, r30
 43e:	ff 1f       	adc	r31, r31
 440:	e4 5a       	subi	r30, 0xA4	; 164
 442:	fe 4f       	sbci	r31, 0xFE	; 254
 444:	60 83       	st	Z, r22
 446:	71 83       	std	Z+1, r23	; 0x01
 448:	82 83       	std	Z+2, r24	; 0x02
 44a:	93 83       	std	Z+3, r25	; 0x03
 44c:	08 95       	ret

0000044e <reset>:
}


/* Reinicia variáveis */
void reset(void){
	index = 0;
 44e:	10 92 56 01 	sts	0x0156, r1
	noMatch = 0;
 452:	10 92 53 01 	sts	0x0153, r1
	maxSlope = 0;
 456:	10 92 55 01 	sts	0x0155, r1
 45a:	10 92 54 01 	sts	0x0154, r1
 45e:	08 95       	ret

00000460 <checkClipping>:
}

/* Verifica saturação do sinal */
void checkClipping(void){
	if (clipping)
 460:	80 91 5b 01 	lds	r24, 0x015B
 464:	81 11       	cpse	r24, r1
	clipping = 0;
 466:	10 92 5b 01 	sts	0x015B, r1
 46a:	08 95       	ret

0000046c <detectFrequency>:
}

float detectFrequency() {
	float frequency = 0;

	ADCconfig();
 46c:	0e 94 53 00 	call	0xa6	; 0xa6 <ADCconfig>
	
	checkClipping();  
 470:	0e 94 30 02 	call	0x460	; 0x460 <checkClipping>
 
	if (checkMaxAmp > ampThreshold){
 474:	90 91 b2 01 	lds	r25, 0x01B2
 478:	80 91 01 01 	lds	r24, 0x0101
 47c:	89 17       	cp	r24, r25
 47e:	88 f4       	brcc	.+34     	; 0x4a2 <detectFrequency+0x36>
		frequency = 38462/(float)period;//calculate frequency timer rate/period
 480:	60 91 ae 01 	lds	r22, 0x01AE
 484:	70 91 af 01 	lds	r23, 0x01AF
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	0e 94 2f 04 	call	0x85e	; 0x85e <__floatunsisf>
 490:	9b 01       	movw	r18, r22
 492:	ac 01       	movw	r20, r24
 494:	60 e0       	ldi	r22, 0x00	; 0
 496:	7e e3       	ldi	r23, 0x3E	; 62
 498:	86 e1       	ldi	r24, 0x16	; 22
 49a:	97 e4       	ldi	r25, 0x47	; 71
 49c:	0e 94 bd 03 	call	0x77a	; 0x77a <__divsf3>
 4a0:	08 95       	ret
		return frequency;
	}
}
 4a2:	08 95       	ret

000004a4 <tuneString>:

/* Acionamento do motor */
void actMotor() {}

/* Função genérica de afinamento */
void tuneString(uint8_t i) {
 4a4:	8f 92       	push	r8
 4a6:	9f 92       	push	r9
 4a8:	af 92       	push	r10
 4aa:	bf 92       	push	r11
 4ac:	cf 92       	push	r12
 4ae:	df 92       	push	r13
 4b0:	ef 92       	push	r14
 4b2:	ff 92       	push	r15
 4b4:	cf 93       	push	r28
 4b6:	df 93       	push	r29
    float currentFrequency = 0; // Atualizar essa variável com a frequência desafinada da corda em questão.

	do {
		currentFrequency = detectFrequency();
		actMotor();
	} while ( currentFrequency >= (string[i].tunedFrequency)*0.9 || currentFrequency <= (string[i].tunedFrequency)*1.1 );
 4b8:	24 e0       	ldi	r18, 0x04	; 4
 4ba:	82 9f       	mul	r24, r18
 4bc:	c0 01       	movw	r24, r0
 4be:	11 24       	eor	r1, r1
 4c0:	ec 01       	movw	r28, r24
 4c2:	c4 5a       	subi	r28, 0xA4	; 164
 4c4:	de 4f       	sbci	r29, 0xFE	; 254
/* Função genérica de afinamento */
void tuneString(uint8_t i) {
    float currentFrequency = 0; // Atualizar essa variável com a frequência desafinada da corda em questão.

	do {
		currentFrequency = detectFrequency();
 4c6:	0e 94 36 02 	call	0x46c	; 0x46c <detectFrequency>
 4ca:	6b 01       	movw	r12, r22
 4cc:	7c 01       	movw	r14, r24
		actMotor();
	} while ( currentFrequency >= (string[i].tunedFrequency)*0.9 || currentFrequency <= (string[i].tunedFrequency)*1.1 );
 4ce:	88 80       	ld	r8, Y
 4d0:	99 80       	ldd	r9, Y+1	; 0x01
 4d2:	aa 80       	ldd	r10, Y+2	; 0x02
 4d4:	bb 80       	ldd	r11, Y+3	; 0x03
 4d6:	26 e6       	ldi	r18, 0x66	; 102
 4d8:	36 e6       	ldi	r19, 0x66	; 102
 4da:	46 e6       	ldi	r20, 0x66	; 102
 4dc:	5f e3       	ldi	r21, 0x3F	; 63
 4de:	c5 01       	movw	r24, r10
 4e0:	b4 01       	movw	r22, r8
 4e2:	0e 94 e6 04 	call	0x9cc	; 0x9cc <__mulsf3>
 4e6:	9b 01       	movw	r18, r22
 4e8:	ac 01       	movw	r20, r24
 4ea:	c7 01       	movw	r24, r14
 4ec:	b6 01       	movw	r22, r12
 4ee:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gesf2>
 4f2:	88 23       	and	r24, r24
 4f4:	44 f7       	brge	.-48     	; 0x4c6 <tuneString+0x22>
 4f6:	2d ec       	ldi	r18, 0xCD	; 205
 4f8:	3c ec       	ldi	r19, 0xCC	; 204
 4fa:	4c e8       	ldi	r20, 0x8C	; 140
 4fc:	5f e3       	ldi	r21, 0x3F	; 63
 4fe:	c5 01       	movw	r24, r10
 500:	b4 01       	movw	r22, r8
 502:	0e 94 e6 04 	call	0x9cc	; 0x9cc <__mulsf3>
 506:	9b 01       	movw	r18, r22
 508:	ac 01       	movw	r20, r24
 50a:	c7 01       	movw	r24, r14
 50c:	b6 01       	movw	r22, r12
 50e:	0e 94 b8 03 	call	0x770	; 0x770 <__cmpsf2>
 512:	18 16       	cp	r1, r24
 514:	c4 f6       	brge	.-80     	; 0x4c6 <tuneString+0x22>

    stringInTune = 1;    // Avança na FSM.
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	80 93 4f 01 	sts	0x014F, r24
}
 51c:	df 91       	pop	r29
 51e:	cf 91       	pop	r28
 520:	ff 90       	pop	r15
 522:	ef 90       	pop	r14
 524:	df 90       	pop	r13
 526:	cf 90       	pop	r12
 528:	bf 90       	pop	r11
 52a:	af 90       	pop	r10
 52c:	9f 90       	pop	r9
 52e:	8f 90       	pop	r8
 530:	08 95       	ret

00000532 <__vector_21>:
	if (clipping)
	clipping = 0;
}

/* Valor do conversor A/D está pronto */
ISR(ADC_vect) {
 532:	1f 92       	push	r1
 534:	0f 92       	push	r0
 536:	0f b6       	in	r0, 0x3f	; 63
 538:	0f 92       	push	r0
 53a:	11 24       	eor	r1, r1
 53c:	2f 93       	push	r18
 53e:	3f 93       	push	r19
 540:	4f 93       	push	r20
 542:	5f 93       	push	r21
 544:	6f 93       	push	r22
 546:	7f 93       	push	r23
 548:	8f 93       	push	r24
 54a:	9f 93       	push	r25
 54c:	af 93       	push	r26
 54e:	bf 93       	push	r27
 550:	cf 93       	push	r28
 552:	df 93       	push	r29
 554:	ef 93       	push	r30
 556:	ff 93       	push	r31
	prevData = newData;//store previous value
 558:	90 91 5a 01 	lds	r25, 0x015A
 55c:	90 93 59 01 	sts	0x0159, r25
	newData = ADCH;//get value from A0
 560:	80 91 79 00 	lds	r24, 0x0079
 564:	80 93 5a 01 	sts	0x015A, r24
	if (prevData < 127 && newData >=127){//if increasing and crossing midpoint
 568:	9f 37       	cpi	r25, 0x7F	; 127
 56a:	08 f0       	brcs	.+2      	; 0x56e <__vector_21+0x3c>
 56c:	a8 c0       	rjmp	.+336    	; 0x6be <__vector_21+0x18c>
 56e:	8f 37       	cpi	r24, 0x7F	; 127
 570:	08 f4       	brcc	.+2      	; 0x574 <__vector_21+0x42>
 572:	a5 c0       	rjmp	.+330    	; 0x6be <__vector_21+0x18c>
		newSlope = newData - prevData;//calculate slope
 574:	28 2f       	mov	r18, r24
 576:	30 e0       	ldi	r19, 0x00	; 0
 578:	a9 01       	movw	r20, r18
 57a:	49 1b       	sub	r20, r25
 57c:	51 09       	sbc	r21, r1
 57e:	ca 01       	movw	r24, r20
 580:	50 93 ac 01 	sts	0x01AC, r21
 584:	40 93 ab 01 	sts	0x01AB, r20
		if (abs(newSlope-maxSlope)<slopeTol){//if slopes are ==
 588:	60 91 54 01 	lds	r22, 0x0154
 58c:	70 91 55 01 	lds	r23, 0x0155
 590:	20 91 04 01 	lds	r18, 0x0104
 594:	30 e0       	ldi	r19, 0x00	; 0
 596:	fa 01       	movw	r30, r20
 598:	e6 1b       	sub	r30, r22
 59a:	f7 0b       	sbc	r31, r23
 59c:	af 01       	movw	r20, r30
 59e:	22 f4       	brpl	.+8      	; 0x5a8 <__vector_21+0x76>
 5a0:	44 27       	eor	r20, r20
 5a2:	55 27       	eor	r21, r21
 5a4:	4e 1b       	sub	r20, r30
 5a6:	5f 0b       	sbc	r21, r31
 5a8:	42 17       	cp	r20, r18
 5aa:	53 07       	cpc	r21, r19
 5ac:	0c f0       	brlt	.+2      	; 0x5b0 <__vector_21+0x7e>
 5ae:	6e c0       	rjmp	.+220    	; 0x68c <__vector_21+0x15a>
			//record new data and reset time
			slope[index] = newSlope;
 5b0:	60 91 56 01 	lds	r22, 0x0156
 5b4:	46 2f       	mov	r20, r22
 5b6:	50 e0       	ldi	r21, 0x00	; 0
 5b8:	44 0f       	add	r20, r20
 5ba:	55 1f       	adc	r21, r21
 5bc:	fa 01       	movw	r30, r20
 5be:	ed 54       	subi	r30, 0x4D	; 77
 5c0:	fe 4f       	sbci	r31, 0xFE	; 254
 5c2:	91 83       	std	Z+1, r25	; 0x01
 5c4:	80 83       	st	Z, r24
			timer[index] = time;
 5c6:	e0 91 57 01 	lds	r30, 0x0157
 5ca:	f0 91 58 01 	lds	r31, 0x0158
 5ce:	da 01       	movw	r26, r20
 5d0:	a9 56       	subi	r26, 0x69	; 105
 5d2:	be 4f       	sbci	r27, 0xFE	; 254
 5d4:	ed 93       	st	X+, r30
 5d6:	fc 93       	st	X, r31
			time = 0;
 5d8:	10 92 58 01 	sts	0x0158, r1
 5dc:	10 92 57 01 	sts	0x0157, r1
			if (index == 0){//new max slope just reset
 5e0:	61 11       	cpse	r22, r1
 5e2:	06 c0       	rjmp	.+12     	; 0x5f0 <__vector_21+0xbe>
				noMatch = 0;
 5e4:	10 92 53 01 	sts	0x0153, r1
				index++;//increment index
 5e8:	81 e0       	ldi	r24, 0x01	; 1
 5ea:	80 93 56 01 	sts	0x0156, r24
 5ee:	67 c0       	rjmp	.+206    	; 0x6be <__vector_21+0x18c>
			}
			else if (abs(timer[0]-timer[index])<timerTol && abs(slope[0]-newSlope)<slopeTol){//if timer duration and slopes match
 5f0:	40 91 97 01 	lds	r20, 0x0197
 5f4:	50 91 98 01 	lds	r21, 0x0198
 5f8:	4e 1b       	sub	r20, r30
 5fa:	5f 0b       	sbc	r21, r31
 5fc:	da 01       	movw	r26, r20
 5fe:	bb 23       	and	r27, r27
 600:	24 f4       	brge	.+8      	; 0x60a <__vector_21+0xd8>
 602:	aa 27       	eor	r26, r26
 604:	bb 27       	eor	r27, r27
 606:	a4 1b       	sub	r26, r20
 608:	b5 0b       	sbc	r27, r21
 60a:	40 91 02 01 	lds	r20, 0x0102
 60e:	50 91 03 01 	lds	r21, 0x0103
 612:	a4 17       	cp	r26, r20
 614:	b5 07       	cpc	r27, r21
 616:	94 f5       	brge	.+100    	; 0x67c <__vector_21+0x14a>
 618:	40 91 b3 01 	lds	r20, 0x01B3
 61c:	50 91 b4 01 	lds	r21, 0x01B4
 620:	48 1b       	sub	r20, r24
 622:	59 0b       	sbc	r21, r25
 624:	da 01       	movw	r26, r20
 626:	bb 23       	and	r27, r27
 628:	24 f4       	brge	.+8      	; 0x632 <__vector_21+0x100>
 62a:	aa 27       	eor	r26, r26
 62c:	bb 27       	eor	r27, r27
 62e:	a4 1b       	sub	r26, r20
 630:	b5 0b       	sbc	r27, r21
 632:	a2 17       	cp	r26, r18
 634:	b3 07       	cpc	r27, r19
 636:	14 f5       	brge	.+68     	; 0x67c <__vector_21+0x14a>
 638:	a7 e9       	ldi	r26, 0x97	; 151
 63a:	b1 e0       	ldi	r27, 0x01	; 1
 63c:	40 e0       	ldi	r20, 0x00	; 0
 63e:	50 e0       	ldi	r21, 0x00	; 0
 640:	20 e0       	ldi	r18, 0x00	; 0
				//sum timer values
				totalTimer = 0;
				for (uint8_t i=0;i<index;i++){
					totalTimer+=timer[i];
 642:	cd 91       	ld	r28, X+
 644:	dd 91       	ld	r29, X+
 646:	4c 0f       	add	r20, r28
 648:	5d 1f       	adc	r21, r29
				index++;//increment index
			}
			else if (abs(timer[0]-timer[index])<timerTol && abs(slope[0]-newSlope)<slopeTol){//if timer duration and slopes match
				//sum timer values
				totalTimer = 0;
				for (uint8_t i=0;i<index;i++){
 64a:	2f 5f       	subi	r18, 0xFF	; 255
 64c:	26 13       	cpse	r18, r22
 64e:	f9 cf       	rjmp	.-14     	; 0x642 <__vector_21+0x110>
 650:	50 93 b1 01 	sts	0x01B1, r21
 654:	40 93 b0 01 	sts	0x01B0, r20
					totalTimer+=timer[i];
				}
				period = totalTimer;//set period
 658:	50 93 af 01 	sts	0x01AF, r21
 65c:	40 93 ae 01 	sts	0x01AE, r20
				//reset new zero index values to compare with
				timer[0] = timer[index];
 660:	f0 93 98 01 	sts	0x0198, r31
 664:	e0 93 97 01 	sts	0x0197, r30
				slope[0] = slope[index];
 668:	90 93 b4 01 	sts	0x01B4, r25
 66c:	80 93 b3 01 	sts	0x01B3, r24
				index = 1;//set index to 1
 670:	81 e0       	ldi	r24, 0x01	; 1
 672:	80 93 56 01 	sts	0x0156, r24
				noMatch = 0;
 676:	10 92 53 01 	sts	0x0153, r1
 67a:	21 c0       	rjmp	.+66     	; 0x6be <__vector_21+0x18c>
			}
			else{//crossing midpoint but not match
				index++;//increment index
 67c:	6f 5f       	subi	r22, 0xFF	; 255
 67e:	60 93 56 01 	sts	0x0156, r22
				if (index > 9){
 682:	6a 30       	cpi	r22, 0x0A	; 10
 684:	e0 f0       	brcs	.+56     	; 0x6be <__vector_21+0x18c>
					reset();
 686:	0e 94 27 02 	call	0x44e	; 0x44e <reset>
 68a:	19 c0       	rjmp	.+50     	; 0x6be <__vector_21+0x18c>
				}
			}
		}
		else if (newSlope>maxSlope){//if new slope is much larger than max slope
 68c:	68 17       	cp	r22, r24
 68e:	79 07       	cpc	r23, r25
 690:	6c f4       	brge	.+26     	; 0x6ac <__vector_21+0x17a>
			maxSlope = newSlope;
 692:	90 93 55 01 	sts	0x0155, r25
 696:	80 93 54 01 	sts	0x0154, r24
			time = 0;//reset clock
 69a:	10 92 58 01 	sts	0x0158, r1
 69e:	10 92 57 01 	sts	0x0157, r1
			noMatch = 0;
 6a2:	10 92 53 01 	sts	0x0153, r1
			index = 0;//reset index
 6a6:	10 92 56 01 	sts	0x0156, r1
 6aa:	09 c0       	rjmp	.+18     	; 0x6be <__vector_21+0x18c>
		}
		else{//slope not steep enough
			noMatch++;//increment no match counter
 6ac:	80 91 53 01 	lds	r24, 0x0153
 6b0:	8f 5f       	subi	r24, 0xFF	; 255
 6b2:	80 93 53 01 	sts	0x0153, r24
			if (noMatch>9){
 6b6:	8a 30       	cpi	r24, 0x0A	; 10
 6b8:	10 f0       	brcs	.+4      	; 0x6be <__vector_21+0x18c>
				reset();
 6ba:	0e 94 27 02 	call	0x44e	; 0x44e <reset>
			}
		}
	}
	
	if (newData == 0 || newData == 1023){//if clipping
 6be:	80 91 5a 01 	lds	r24, 0x015A
 6c2:	81 11       	cpse	r24, r1
 6c4:	03 c0       	rjmp	.+6      	; 0x6cc <__vector_21+0x19a>
		clipping = 1;//currently clipping
 6c6:	81 e0       	ldi	r24, 0x01	; 1
 6c8:	80 93 5b 01 	sts	0x015B, r24
	}
	
	time++;//increment timer at rate of 38.5kHz
 6cc:	80 91 57 01 	lds	r24, 0x0157
 6d0:	90 91 58 01 	lds	r25, 0x0158
 6d4:	01 96       	adiw	r24, 0x01	; 1
 6d6:	90 93 58 01 	sts	0x0158, r25
 6da:	80 93 57 01 	sts	0x0157, r24
	
	ampTimer++;//increment amplitude timer
 6de:	80 91 51 01 	lds	r24, 0x0151
 6e2:	90 91 52 01 	lds	r25, 0x0152
 6e6:	01 96       	adiw	r24, 0x01	; 1
 6e8:	90 93 52 01 	sts	0x0152, r25
 6ec:	80 93 51 01 	sts	0x0151, r24
	if (abs(127-ADCH)>maxAmp){
 6f0:	40 91 79 00 	lds	r20, 0x0079
 6f4:	2f e7       	ldi	r18, 0x7F	; 127
 6f6:	30 e0       	ldi	r19, 0x00	; 0
 6f8:	24 1b       	sub	r18, r20
 6fa:	31 09       	sbc	r19, r1
 6fc:	a9 01       	movw	r20, r18
 6fe:	22 f4       	brpl	.+8      	; 0x708 <__vector_21+0x1d6>
 700:	44 27       	eor	r20, r20
 702:	55 27       	eor	r21, r21
 704:	42 1b       	sub	r20, r18
 706:	53 0b       	sbc	r21, r19
 708:	20 91 50 01 	lds	r18, 0x0150
 70c:	30 e0       	ldi	r19, 0x00	; 0
 70e:	24 17       	cp	r18, r20
 710:	35 07       	cpc	r19, r21
 712:	74 f4       	brge	.+28     	; 0x730 <__vector_21+0x1fe>
		maxAmp = abs(127-ADCH);
 714:	40 91 79 00 	lds	r20, 0x0079
 718:	2f e7       	ldi	r18, 0x7F	; 127
 71a:	30 e0       	ldi	r19, 0x00	; 0
 71c:	24 1b       	sub	r18, r20
 71e:	31 09       	sbc	r19, r1
 720:	a9 01       	movw	r20, r18
 722:	22 f4       	brpl	.+8      	; 0x72c <__vector_21+0x1fa>
 724:	44 27       	eor	r20, r20
 726:	55 27       	eor	r21, r21
 728:	42 1b       	sub	r20, r18
 72a:	53 0b       	sbc	r21, r19
 72c:	40 93 50 01 	sts	0x0150, r20
	}
	if (ampTimer==1000){
 730:	88 3e       	cpi	r24, 0xE8	; 232
 732:	93 40       	sbci	r25, 0x03	; 3
 734:	51 f4       	brne	.+20     	; 0x74a <__vector_21+0x218>
		ampTimer = 0;
 736:	10 92 52 01 	sts	0x0152, r1
 73a:	10 92 51 01 	sts	0x0151, r1
		checkMaxAmp = maxAmp;
 73e:	80 91 50 01 	lds	r24, 0x0150
 742:	80 93 b2 01 	sts	0x01B2, r24
		maxAmp = 0;
 746:	10 92 50 01 	sts	0x0150, r1
	}
	
 74a:	ff 91       	pop	r31
 74c:	ef 91       	pop	r30
 74e:	df 91       	pop	r29
 750:	cf 91       	pop	r28
 752:	bf 91       	pop	r27
 754:	af 91       	pop	r26
 756:	9f 91       	pop	r25
 758:	8f 91       	pop	r24
 75a:	7f 91       	pop	r23
 75c:	6f 91       	pop	r22
 75e:	5f 91       	pop	r21
 760:	4f 91       	pop	r20
 762:	3f 91       	pop	r19
 764:	2f 91       	pop	r18
 766:	0f 90       	pop	r0
 768:	0f be       	out	0x3f, r0	; 63
 76a:	0f 90       	pop	r0
 76c:	1f 90       	pop	r1
 76e:	18 95       	reti

00000770 <__cmpsf2>:
 770:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__fp_cmp>
 774:	08 f4       	brcc	.+2      	; 0x778 <__cmpsf2+0x8>
 776:	81 e0       	ldi	r24, 0x01	; 1
 778:	08 95       	ret

0000077a <__divsf3>:
 77a:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__divsf3x>
 77e:	0c 94 a7 04 	jmp	0x94e	; 0x94e <__fp_round>
 782:	0e 94 a0 04 	call	0x940	; 0x940 <__fp_pscB>
 786:	58 f0       	brcs	.+22     	; 0x79e <__divsf3+0x24>
 788:	0e 94 99 04 	call	0x932	; 0x932 <__fp_pscA>
 78c:	40 f0       	brcs	.+16     	; 0x79e <__divsf3+0x24>
 78e:	29 f4       	brne	.+10     	; 0x79a <__divsf3+0x20>
 790:	5f 3f       	cpi	r21, 0xFF	; 255
 792:	29 f0       	breq	.+10     	; 0x79e <__divsf3+0x24>
 794:	0c 94 90 04 	jmp	0x920	; 0x920 <__fp_inf>
 798:	51 11       	cpse	r21, r1
 79a:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <__fp_szero>
 79e:	0c 94 96 04 	jmp	0x92c	; 0x92c <__fp_nan>

000007a2 <__divsf3x>:
 7a2:	0e 94 b8 04 	call	0x970	; 0x970 <__fp_split3>
 7a6:	68 f3       	brcs	.-38     	; 0x782 <__divsf3+0x8>

000007a8 <__divsf3_pse>:
 7a8:	99 23       	and	r25, r25
 7aa:	b1 f3       	breq	.-20     	; 0x798 <__divsf3+0x1e>
 7ac:	55 23       	and	r21, r21
 7ae:	91 f3       	breq	.-28     	; 0x794 <__divsf3+0x1a>
 7b0:	95 1b       	sub	r25, r21
 7b2:	55 0b       	sbc	r21, r21
 7b4:	bb 27       	eor	r27, r27
 7b6:	aa 27       	eor	r26, r26
 7b8:	62 17       	cp	r22, r18
 7ba:	73 07       	cpc	r23, r19
 7bc:	84 07       	cpc	r24, r20
 7be:	38 f0       	brcs	.+14     	; 0x7ce <__divsf3_pse+0x26>
 7c0:	9f 5f       	subi	r25, 0xFF	; 255
 7c2:	5f 4f       	sbci	r21, 0xFF	; 255
 7c4:	22 0f       	add	r18, r18
 7c6:	33 1f       	adc	r19, r19
 7c8:	44 1f       	adc	r20, r20
 7ca:	aa 1f       	adc	r26, r26
 7cc:	a9 f3       	breq	.-22     	; 0x7b8 <__divsf3_pse+0x10>
 7ce:	35 d0       	rcall	.+106    	; 0x83a <__divsf3_pse+0x92>
 7d0:	0e 2e       	mov	r0, r30
 7d2:	3a f0       	brmi	.+14     	; 0x7e2 <__divsf3_pse+0x3a>
 7d4:	e0 e8       	ldi	r30, 0x80	; 128
 7d6:	32 d0       	rcall	.+100    	; 0x83c <__divsf3_pse+0x94>
 7d8:	91 50       	subi	r25, 0x01	; 1
 7da:	50 40       	sbci	r21, 0x00	; 0
 7dc:	e6 95       	lsr	r30
 7de:	00 1c       	adc	r0, r0
 7e0:	ca f7       	brpl	.-14     	; 0x7d4 <__divsf3_pse+0x2c>
 7e2:	2b d0       	rcall	.+86     	; 0x83a <__divsf3_pse+0x92>
 7e4:	fe 2f       	mov	r31, r30
 7e6:	29 d0       	rcall	.+82     	; 0x83a <__divsf3_pse+0x92>
 7e8:	66 0f       	add	r22, r22
 7ea:	77 1f       	adc	r23, r23
 7ec:	88 1f       	adc	r24, r24
 7ee:	bb 1f       	adc	r27, r27
 7f0:	26 17       	cp	r18, r22
 7f2:	37 07       	cpc	r19, r23
 7f4:	48 07       	cpc	r20, r24
 7f6:	ab 07       	cpc	r26, r27
 7f8:	b0 e8       	ldi	r27, 0x80	; 128
 7fa:	09 f0       	breq	.+2      	; 0x7fe <__divsf3_pse+0x56>
 7fc:	bb 0b       	sbc	r27, r27
 7fe:	80 2d       	mov	r24, r0
 800:	bf 01       	movw	r22, r30
 802:	ff 27       	eor	r31, r31
 804:	93 58       	subi	r25, 0x83	; 131
 806:	5f 4f       	sbci	r21, 0xFF	; 255
 808:	3a f0       	brmi	.+14     	; 0x818 <__divsf3_pse+0x70>
 80a:	9e 3f       	cpi	r25, 0xFE	; 254
 80c:	51 05       	cpc	r21, r1
 80e:	78 f0       	brcs	.+30     	; 0x82e <__divsf3_pse+0x86>
 810:	0c 94 90 04 	jmp	0x920	; 0x920 <__fp_inf>
 814:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <__fp_szero>
 818:	5f 3f       	cpi	r21, 0xFF	; 255
 81a:	e4 f3       	brlt	.-8      	; 0x814 <__divsf3_pse+0x6c>
 81c:	98 3e       	cpi	r25, 0xE8	; 232
 81e:	d4 f3       	brlt	.-12     	; 0x814 <__divsf3_pse+0x6c>
 820:	86 95       	lsr	r24
 822:	77 95       	ror	r23
 824:	67 95       	ror	r22
 826:	b7 95       	ror	r27
 828:	f7 95       	ror	r31
 82a:	9f 5f       	subi	r25, 0xFF	; 255
 82c:	c9 f7       	brne	.-14     	; 0x820 <__divsf3_pse+0x78>
 82e:	88 0f       	add	r24, r24
 830:	91 1d       	adc	r25, r1
 832:	96 95       	lsr	r25
 834:	87 95       	ror	r24
 836:	97 f9       	bld	r25, 7
 838:	08 95       	ret
 83a:	e1 e0       	ldi	r30, 0x01	; 1
 83c:	66 0f       	add	r22, r22
 83e:	77 1f       	adc	r23, r23
 840:	88 1f       	adc	r24, r24
 842:	bb 1f       	adc	r27, r27
 844:	62 17       	cp	r22, r18
 846:	73 07       	cpc	r23, r19
 848:	84 07       	cpc	r24, r20
 84a:	ba 07       	cpc	r27, r26
 84c:	20 f0       	brcs	.+8      	; 0x856 <__divsf3_pse+0xae>
 84e:	62 1b       	sub	r22, r18
 850:	73 0b       	sbc	r23, r19
 852:	84 0b       	sbc	r24, r20
 854:	ba 0b       	sbc	r27, r26
 856:	ee 1f       	adc	r30, r30
 858:	88 f7       	brcc	.-30     	; 0x83c <__divsf3_pse+0x94>
 85a:	e0 95       	com	r30
 85c:	08 95       	ret

0000085e <__floatunsisf>:
 85e:	e8 94       	clt
 860:	09 c0       	rjmp	.+18     	; 0x874 <__floatsisf+0x12>

00000862 <__floatsisf>:
 862:	97 fb       	bst	r25, 7
 864:	3e f4       	brtc	.+14     	; 0x874 <__floatsisf+0x12>
 866:	90 95       	com	r25
 868:	80 95       	com	r24
 86a:	70 95       	com	r23
 86c:	61 95       	neg	r22
 86e:	7f 4f       	sbci	r23, 0xFF	; 255
 870:	8f 4f       	sbci	r24, 0xFF	; 255
 872:	9f 4f       	sbci	r25, 0xFF	; 255
 874:	99 23       	and	r25, r25
 876:	a9 f0       	breq	.+42     	; 0x8a2 <__floatsisf+0x40>
 878:	f9 2f       	mov	r31, r25
 87a:	96 e9       	ldi	r25, 0x96	; 150
 87c:	bb 27       	eor	r27, r27
 87e:	93 95       	inc	r25
 880:	f6 95       	lsr	r31
 882:	87 95       	ror	r24
 884:	77 95       	ror	r23
 886:	67 95       	ror	r22
 888:	b7 95       	ror	r27
 88a:	f1 11       	cpse	r31, r1
 88c:	f8 cf       	rjmp	.-16     	; 0x87e <__floatsisf+0x1c>
 88e:	fa f4       	brpl	.+62     	; 0x8ce <__floatsisf+0x6c>
 890:	bb 0f       	add	r27, r27
 892:	11 f4       	brne	.+4      	; 0x898 <__floatsisf+0x36>
 894:	60 ff       	sbrs	r22, 0
 896:	1b c0       	rjmp	.+54     	; 0x8ce <__floatsisf+0x6c>
 898:	6f 5f       	subi	r22, 0xFF	; 255
 89a:	7f 4f       	sbci	r23, 0xFF	; 255
 89c:	8f 4f       	sbci	r24, 0xFF	; 255
 89e:	9f 4f       	sbci	r25, 0xFF	; 255
 8a0:	16 c0       	rjmp	.+44     	; 0x8ce <__floatsisf+0x6c>
 8a2:	88 23       	and	r24, r24
 8a4:	11 f0       	breq	.+4      	; 0x8aa <__floatsisf+0x48>
 8a6:	96 e9       	ldi	r25, 0x96	; 150
 8a8:	11 c0       	rjmp	.+34     	; 0x8cc <__floatsisf+0x6a>
 8aa:	77 23       	and	r23, r23
 8ac:	21 f0       	breq	.+8      	; 0x8b6 <__floatsisf+0x54>
 8ae:	9e e8       	ldi	r25, 0x8E	; 142
 8b0:	87 2f       	mov	r24, r23
 8b2:	76 2f       	mov	r23, r22
 8b4:	05 c0       	rjmp	.+10     	; 0x8c0 <__floatsisf+0x5e>
 8b6:	66 23       	and	r22, r22
 8b8:	71 f0       	breq	.+28     	; 0x8d6 <__floatsisf+0x74>
 8ba:	96 e8       	ldi	r25, 0x86	; 134
 8bc:	86 2f       	mov	r24, r22
 8be:	70 e0       	ldi	r23, 0x00	; 0
 8c0:	60 e0       	ldi	r22, 0x00	; 0
 8c2:	2a f0       	brmi	.+10     	; 0x8ce <__floatsisf+0x6c>
 8c4:	9a 95       	dec	r25
 8c6:	66 0f       	add	r22, r22
 8c8:	77 1f       	adc	r23, r23
 8ca:	88 1f       	adc	r24, r24
 8cc:	da f7       	brpl	.-10     	; 0x8c4 <__floatsisf+0x62>
 8ce:	88 0f       	add	r24, r24
 8d0:	96 95       	lsr	r25
 8d2:	87 95       	ror	r24
 8d4:	97 f9       	bld	r25, 7
 8d6:	08 95       	ret

000008d8 <__fp_cmp>:
 8d8:	99 0f       	add	r25, r25
 8da:	00 08       	sbc	r0, r0
 8dc:	55 0f       	add	r21, r21
 8de:	aa 0b       	sbc	r26, r26
 8e0:	e0 e8       	ldi	r30, 0x80	; 128
 8e2:	fe ef       	ldi	r31, 0xFE	; 254
 8e4:	16 16       	cp	r1, r22
 8e6:	17 06       	cpc	r1, r23
 8e8:	e8 07       	cpc	r30, r24
 8ea:	f9 07       	cpc	r31, r25
 8ec:	c0 f0       	brcs	.+48     	; 0x91e <__stack+0x1f>
 8ee:	12 16       	cp	r1, r18
 8f0:	13 06       	cpc	r1, r19
 8f2:	e4 07       	cpc	r30, r20
 8f4:	f5 07       	cpc	r31, r21
 8f6:	98 f0       	brcs	.+38     	; 0x91e <__stack+0x1f>
 8f8:	62 1b       	sub	r22, r18
 8fa:	73 0b       	sbc	r23, r19
 8fc:	84 0b       	sbc	r24, r20
 8fe:	95 0b       	sbc	r25, r21
 900:	39 f4       	brne	.+14     	; 0x910 <__stack+0x11>
 902:	0a 26       	eor	r0, r26
 904:	61 f0       	breq	.+24     	; 0x91e <__stack+0x1f>
 906:	23 2b       	or	r18, r19
 908:	24 2b       	or	r18, r20
 90a:	25 2b       	or	r18, r21
 90c:	21 f4       	brne	.+8      	; 0x916 <__stack+0x17>
 90e:	08 95       	ret
 910:	0a 26       	eor	r0, r26
 912:	09 f4       	brne	.+2      	; 0x916 <__stack+0x17>
 914:	a1 40       	sbci	r26, 0x01	; 1
 916:	a6 95       	lsr	r26
 918:	8f ef       	ldi	r24, 0xFF	; 255
 91a:	81 1d       	adc	r24, r1
 91c:	81 1d       	adc	r24, r1
 91e:	08 95       	ret

00000920 <__fp_inf>:
 920:	97 f9       	bld	r25, 7
 922:	9f 67       	ori	r25, 0x7F	; 127
 924:	80 e8       	ldi	r24, 0x80	; 128
 926:	70 e0       	ldi	r23, 0x00	; 0
 928:	60 e0       	ldi	r22, 0x00	; 0
 92a:	08 95       	ret

0000092c <__fp_nan>:
 92c:	9f ef       	ldi	r25, 0xFF	; 255
 92e:	80 ec       	ldi	r24, 0xC0	; 192
 930:	08 95       	ret

00000932 <__fp_pscA>:
 932:	00 24       	eor	r0, r0
 934:	0a 94       	dec	r0
 936:	16 16       	cp	r1, r22
 938:	17 06       	cpc	r1, r23
 93a:	18 06       	cpc	r1, r24
 93c:	09 06       	cpc	r0, r25
 93e:	08 95       	ret

00000940 <__fp_pscB>:
 940:	00 24       	eor	r0, r0
 942:	0a 94       	dec	r0
 944:	12 16       	cp	r1, r18
 946:	13 06       	cpc	r1, r19
 948:	14 06       	cpc	r1, r20
 94a:	05 06       	cpc	r0, r21
 94c:	08 95       	ret

0000094e <__fp_round>:
 94e:	09 2e       	mov	r0, r25
 950:	03 94       	inc	r0
 952:	00 0c       	add	r0, r0
 954:	11 f4       	brne	.+4      	; 0x95a <__fp_round+0xc>
 956:	88 23       	and	r24, r24
 958:	52 f0       	brmi	.+20     	; 0x96e <__fp_round+0x20>
 95a:	bb 0f       	add	r27, r27
 95c:	40 f4       	brcc	.+16     	; 0x96e <__fp_round+0x20>
 95e:	bf 2b       	or	r27, r31
 960:	11 f4       	brne	.+4      	; 0x966 <__fp_round+0x18>
 962:	60 ff       	sbrs	r22, 0
 964:	04 c0       	rjmp	.+8      	; 0x96e <__fp_round+0x20>
 966:	6f 5f       	subi	r22, 0xFF	; 255
 968:	7f 4f       	sbci	r23, 0xFF	; 255
 96a:	8f 4f       	sbci	r24, 0xFF	; 255
 96c:	9f 4f       	sbci	r25, 0xFF	; 255
 96e:	08 95       	ret

00000970 <__fp_split3>:
 970:	57 fd       	sbrc	r21, 7
 972:	90 58       	subi	r25, 0x80	; 128
 974:	44 0f       	add	r20, r20
 976:	55 1f       	adc	r21, r21
 978:	59 f0       	breq	.+22     	; 0x990 <__fp_splitA+0x10>
 97a:	5f 3f       	cpi	r21, 0xFF	; 255
 97c:	71 f0       	breq	.+28     	; 0x99a <__fp_splitA+0x1a>
 97e:	47 95       	ror	r20

00000980 <__fp_splitA>:
 980:	88 0f       	add	r24, r24
 982:	97 fb       	bst	r25, 7
 984:	99 1f       	adc	r25, r25
 986:	61 f0       	breq	.+24     	; 0x9a0 <__fp_splitA+0x20>
 988:	9f 3f       	cpi	r25, 0xFF	; 255
 98a:	79 f0       	breq	.+30     	; 0x9aa <__fp_splitA+0x2a>
 98c:	87 95       	ror	r24
 98e:	08 95       	ret
 990:	12 16       	cp	r1, r18
 992:	13 06       	cpc	r1, r19
 994:	14 06       	cpc	r1, r20
 996:	55 1f       	adc	r21, r21
 998:	f2 cf       	rjmp	.-28     	; 0x97e <__fp_split3+0xe>
 99a:	46 95       	lsr	r20
 99c:	f1 df       	rcall	.-30     	; 0x980 <__fp_splitA>
 99e:	08 c0       	rjmp	.+16     	; 0x9b0 <__fp_splitA+0x30>
 9a0:	16 16       	cp	r1, r22
 9a2:	17 06       	cpc	r1, r23
 9a4:	18 06       	cpc	r1, r24
 9a6:	99 1f       	adc	r25, r25
 9a8:	f1 cf       	rjmp	.-30     	; 0x98c <__fp_splitA+0xc>
 9aa:	86 95       	lsr	r24
 9ac:	71 05       	cpc	r23, r1
 9ae:	61 05       	cpc	r22, r1
 9b0:	08 94       	sec
 9b2:	08 95       	ret

000009b4 <__fp_zero>:
 9b4:	e8 94       	clt

000009b6 <__fp_szero>:
 9b6:	bb 27       	eor	r27, r27
 9b8:	66 27       	eor	r22, r22
 9ba:	77 27       	eor	r23, r23
 9bc:	cb 01       	movw	r24, r22
 9be:	97 f9       	bld	r25, 7
 9c0:	08 95       	ret

000009c2 <__gesf2>:
 9c2:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__fp_cmp>
 9c6:	08 f4       	brcc	.+2      	; 0x9ca <__gesf2+0x8>
 9c8:	8f ef       	ldi	r24, 0xFF	; 255
 9ca:	08 95       	ret

000009cc <__mulsf3>:
 9cc:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__mulsf3x>
 9d0:	0c 94 a7 04 	jmp	0x94e	; 0x94e <__fp_round>
 9d4:	0e 94 99 04 	call	0x932	; 0x932 <__fp_pscA>
 9d8:	38 f0       	brcs	.+14     	; 0x9e8 <__mulsf3+0x1c>
 9da:	0e 94 a0 04 	call	0x940	; 0x940 <__fp_pscB>
 9de:	20 f0       	brcs	.+8      	; 0x9e8 <__mulsf3+0x1c>
 9e0:	95 23       	and	r25, r21
 9e2:	11 f0       	breq	.+4      	; 0x9e8 <__mulsf3+0x1c>
 9e4:	0c 94 90 04 	jmp	0x920	; 0x920 <__fp_inf>
 9e8:	0c 94 96 04 	jmp	0x92c	; 0x92c <__fp_nan>
 9ec:	11 24       	eor	r1, r1
 9ee:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <__fp_szero>

000009f2 <__mulsf3x>:
 9f2:	0e 94 b8 04 	call	0x970	; 0x970 <__fp_split3>
 9f6:	70 f3       	brcs	.-36     	; 0x9d4 <__mulsf3+0x8>

000009f8 <__mulsf3_pse>:
 9f8:	95 9f       	mul	r25, r21
 9fa:	c1 f3       	breq	.-16     	; 0x9ec <__mulsf3+0x20>
 9fc:	95 0f       	add	r25, r21
 9fe:	50 e0       	ldi	r21, 0x00	; 0
 a00:	55 1f       	adc	r21, r21
 a02:	62 9f       	mul	r22, r18
 a04:	f0 01       	movw	r30, r0
 a06:	72 9f       	mul	r23, r18
 a08:	bb 27       	eor	r27, r27
 a0a:	f0 0d       	add	r31, r0
 a0c:	b1 1d       	adc	r27, r1
 a0e:	63 9f       	mul	r22, r19
 a10:	aa 27       	eor	r26, r26
 a12:	f0 0d       	add	r31, r0
 a14:	b1 1d       	adc	r27, r1
 a16:	aa 1f       	adc	r26, r26
 a18:	64 9f       	mul	r22, r20
 a1a:	66 27       	eor	r22, r22
 a1c:	b0 0d       	add	r27, r0
 a1e:	a1 1d       	adc	r26, r1
 a20:	66 1f       	adc	r22, r22
 a22:	82 9f       	mul	r24, r18
 a24:	22 27       	eor	r18, r18
 a26:	b0 0d       	add	r27, r0
 a28:	a1 1d       	adc	r26, r1
 a2a:	62 1f       	adc	r22, r18
 a2c:	73 9f       	mul	r23, r19
 a2e:	b0 0d       	add	r27, r0
 a30:	a1 1d       	adc	r26, r1
 a32:	62 1f       	adc	r22, r18
 a34:	83 9f       	mul	r24, r19
 a36:	a0 0d       	add	r26, r0
 a38:	61 1d       	adc	r22, r1
 a3a:	22 1f       	adc	r18, r18
 a3c:	74 9f       	mul	r23, r20
 a3e:	33 27       	eor	r19, r19
 a40:	a0 0d       	add	r26, r0
 a42:	61 1d       	adc	r22, r1
 a44:	23 1f       	adc	r18, r19
 a46:	84 9f       	mul	r24, r20
 a48:	60 0d       	add	r22, r0
 a4a:	21 1d       	adc	r18, r1
 a4c:	82 2f       	mov	r24, r18
 a4e:	76 2f       	mov	r23, r22
 a50:	6a 2f       	mov	r22, r26
 a52:	11 24       	eor	r1, r1
 a54:	9f 57       	subi	r25, 0x7F	; 127
 a56:	50 40       	sbci	r21, 0x00	; 0
 a58:	9a f0       	brmi	.+38     	; 0xa80 <__mulsf3_pse+0x88>
 a5a:	f1 f0       	breq	.+60     	; 0xa98 <__mulsf3_pse+0xa0>
 a5c:	88 23       	and	r24, r24
 a5e:	4a f0       	brmi	.+18     	; 0xa72 <__mulsf3_pse+0x7a>
 a60:	ee 0f       	add	r30, r30
 a62:	ff 1f       	adc	r31, r31
 a64:	bb 1f       	adc	r27, r27
 a66:	66 1f       	adc	r22, r22
 a68:	77 1f       	adc	r23, r23
 a6a:	88 1f       	adc	r24, r24
 a6c:	91 50       	subi	r25, 0x01	; 1
 a6e:	50 40       	sbci	r21, 0x00	; 0
 a70:	a9 f7       	brne	.-22     	; 0xa5c <__mulsf3_pse+0x64>
 a72:	9e 3f       	cpi	r25, 0xFE	; 254
 a74:	51 05       	cpc	r21, r1
 a76:	80 f0       	brcs	.+32     	; 0xa98 <__mulsf3_pse+0xa0>
 a78:	0c 94 90 04 	jmp	0x920	; 0x920 <__fp_inf>
 a7c:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <__fp_szero>
 a80:	5f 3f       	cpi	r21, 0xFF	; 255
 a82:	e4 f3       	brlt	.-8      	; 0xa7c <__mulsf3_pse+0x84>
 a84:	98 3e       	cpi	r25, 0xE8	; 232
 a86:	d4 f3       	brlt	.-12     	; 0xa7c <__mulsf3_pse+0x84>
 a88:	86 95       	lsr	r24
 a8a:	77 95       	ror	r23
 a8c:	67 95       	ror	r22
 a8e:	b7 95       	ror	r27
 a90:	f7 95       	ror	r31
 a92:	e7 95       	ror	r30
 a94:	9f 5f       	subi	r25, 0xFF	; 255
 a96:	c1 f7       	brne	.-16     	; 0xa88 <__mulsf3_pse+0x90>
 a98:	fe 2b       	or	r31, r30
 a9a:	88 0f       	add	r24, r24
 a9c:	91 1d       	adc	r25, r1
 a9e:	96 95       	lsr	r25
 aa0:	87 95       	ror	r24
 aa2:	97 f9       	bld	r25, 7
 aa4:	08 95       	ret

00000aa6 <_exit>:
 aa6:	f8 94       	cli

00000aa8 <__stop_program>:
 aa8:	ff cf       	rjmp	.-2      	; 0xaa8 <__stop_program>
